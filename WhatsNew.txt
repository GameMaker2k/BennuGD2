??-??-2023:

- Added bash_completion files

- Added string strtok(string string, string delims)

- Added rfind(string, pattern [, first]) for reverse search

- Fixed (cast)-value and (cast)+value.
- Fixed conversions to float and double

- Added double MAG(double x, double y) which is the same as DIST(0,0,x,y)

- Added: double EXP(double), double LOG(double)
    double LOG10(double)
    double NORMALIZE(double value, double lo, double high)
    double NORMALIZE(int value, int lo, int hi)

    DIST() and DISTANCE() now act as aliases for FGET_DIST()

    NOTE: NORMALIZE is the same as REMAP(value, lo, double, 0, 1)

- Added:
    double rad(int angle)
    int deg(double rad)
    double lerp(double a, double b, double value)
    double invlerp(double a, double b, double value)
    int rangechk(double value, double low, double high); return -1 if value < range, 0 if between range, 1 if value > range
    int rangechk(int value, int low, int high); return -1 if value < range, 0 if between range, 1 if value > range
    double remap(double value, double lowRangeFrom, double highRangeFrom, double lowRangeTo, double highRangeTo)
    int remap(int value, int lowRangeFrom, int highRangeFrom, int lowRangeTo, int highRangeTo)

- Fixed:
    cos() -> double cos(int <deg>)
    sin() -> double sin(int <deg>)
    tan() -> double tan(int <deg>)
    acos() -> int <deg> acos(double)
    asin() -> int <deg> asin(double)
    atan() -> int <deg> atan(double)
    atan2() -> int <deg> atan2(double, double)

- Added CLAMP(int, int, int), BETWEEN(int, int, int)
- Added WRAP(int value, int min, int max)

- Added:
    STRING_SIZE_ARRAY(string *)
    STRING_NEW_ARRAY()

- Added aliases:
    STRING_NEWA -> STRING_NEW_ARRAY
    STRING_RESIZEA -> STRING_RESIZE_ARRAY
    STRING_DELA -> STRING_DEL_ARRAY
    STRING_SIZEA -> STRING_SIZE_ARRAY

- Fixed stats timestamps on glob*

- Fixed issues in system functions with double and float parameters

- Added:
    double TOWARDS(double from, double to, double step)
    int TOWARDS(int from, int to, int step)

- Changed global names:
    sound.sound_freq
    sound.sound_mode
    sound.sound_channels

    to

    sound.freq
    sound.mode
    sound.channels

- Added new "sound mode" defines:
    SOUND_MODE_MONO (or MODE_MONO) for Mono
    SOUND_MODE_STEREO (or MODE_STEREO) for Stereo
    SOUND_MODE_STEREO_2_1 (or MODE_STEREO_2_1) for Stereo 2.1
    SOUND_MODE_SURROUND_4_1 (or MODE_SURROUND_4_1) for Surround 4.0 (quadraphonic)
    SOUND_MODE_SURROUND_5_1 (or MODE_SURROUND_5_1) for Surround 5.1
    SOUND_MODE_SURROUND_7_1 (or MODE_SURROUND_7_1) for Surround 7.1

- Changed values for:
    MODE_MONO before 0, now 1
    MODE_STEREO before 1, now 2

- Default sound.freq is now 44100 Mhz

- Added support for sound.freq 48000 Mhz

- Added new functions:
    MUSIC_PLAY(music) to play a music looped
    SOUND_PLAY(sound) to play a sound once

- Modified the compiler to allow variable redeclaration with value update
        
    Additionally, functionality has been implemented to update the values of variables when assigning a value during their declaration. This ensures that when specifying a value during declaration, this value is maintained and updated in the variable definition.

- Added block sections:
    BEGIN .. END

- Limited Scope Variables

- Added joy_query(e)
- Added JOY_QUERY_HAS, JOY_QUERY_HAS_BUTTON, JOY_QUERY_HAS_AXIS
- Added JOY_QUERY_FIRST_ATTACHED

- New joys layer

- Support for Joystick mapping

- Changed:
    FROM ... TO logic (fixed issues with non-qword vars)
    
- Joystick event disconnect/connect

- Added JOY_IS_ATTACHED

- Fixed utf-8 windows console output

- Nintendo Switch support

- A global variable can be redeclared as private (new variable) in the main process
- Duplicated variables in the same context and of the same type are allowed

    It is no longer necessary to include 'end' in the declaration after declaring the variables; the old syntax is still supported.

- Added support for optional parameters with default values in processes and functions.

- Inline definition and initialization of variables, arrays, and structures are implemented.
- Initializing pointer variables with a value other than NULL or 0 is allowed.
- The conversion of pointers to strings and strings to pointers is made consistent.
- Several bugs in string handling (memory leaks) are fixed.
- New mnemonics are added.
- The generated code (DBC) is optimized in some cases (compilation).
- Improved support for null-terminated strings (C).
- Missing comments in the core are translated.

- Clearer messages in string_dump()

- Support for ending DECLARE with a semicolon has been added if no local or public variables are declared in the statement (END is still supported but optional)

- Added constants dump in compile with verbose

- Support for null-terminated strings pointed to by 'char *' is added. To obtain the string from a pointer, precede the pointer with the '$' prefix. To set a null-terminated string to a pointer, simply assign the string to the pointer. Ensure that the pointer points to a buffer with enough space to contain the string.

- Compilation improvements:
    - Fixed pause when the debug console is displayed
    - Added multimedia functions for subtitles, audio/video/subtitle tracks, and chapters access
    - Added extra parameters for font bitmap sheet
    - Changed character string from char to unsigned char (fixed some related bugs)
    - Default encoding is now iso8859-1 (in the future, the default encoding will be utf-8)
    - Added some missing font chars in the debug console
    - Fixed alignment in bitmap fonts
    - Added bitmap fixed width but with content centered (NFB_FIXEDWITDHCENTER)
    - pause() now works with fade, sounds, video playing, and others
    - The debug console is displayed above the fade
    - Added some string characters functions: isalpha, isspace, isnum, isxnum, isalnum, iswordchar, iswordfist, toupper, tolower

- Added subtitles, chapter, audio tracks for video (internal functions)

- Updated/Added:
    MAP_BLOCK_COPY(FILE_DST, GRAPH_DST, X_DST, Y_DST, FILE_SRC, GRAPH_SRC, X_SRC, Y_SRC, W, H, FLAGS, R, G, B, ALPHA, BLEND_MODE, SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA, EQUATION_RGB, EQUATION_ALPHA)

    MAP_BLOCK_COPY(FILE_DST, GRAPH_DST, X_DST, Y_DST, FILE_SRC, GRAPH_SRC, X_SRC, Y_SRC, W, H, FLAGS, R, G, B, ALPHA )

    MAP_BLOCK_COPY(FILE_DST, GRAPH_DST, X_DST, Y_DST, FILE_SRC, GRAPH_SRC, X_SRC, Y_SRC, W, H, FLAGS, R, G, B, ALPHA, BLEND_MODE)

    MAP_BLOCK_COPY(FILE_DST, GRAPH_DST, X_DST, Y_DST, FILE_SRC, GRAPH_SRC, X_SRC, Y_SRC, W, H, FLAGS, R, G, B, ALPHA, BLEND_MODE, SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA, EQUATION_RGB, EQUATION_ALPHA)

- Multimedia support with libvlc

- Added:
    write_in_map( file dest, map dest, font, x, y, text, alignment )

- Added:
    KEY_UP(int key)
    KEY_DOWN(int key)

- Replaced COLOR_MAROON with COLOR_RED (debug console)

- Added console_alpha in the debug console

- Added dynamic string arrays allocation functions

- Changed xadvance and get_real_point x and y from int to double

- Added Scientific Notation

- Coords (locals x and y) to double

- drawing_z()

- Intersect/projection functions (experimentals)(WIP)

- Added max limits constants:
    MAX_INT
    MAX_INT64
    MAX_LONG
    MAX_QWORD
    MAX_INT32
    MAX_DWORD
    MAX_SHORT
    MAX_WORD
    MAX_SBYTE
    MAX_BYTE
    MAX_CHAR

- Fixed shader scroll back1 and back2
    
- Fixed shader set float

- Added:
    int intersect(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, double *x, double *y)
    int intersec_circle(double cx1, double cy1, double cx2, double cy2, double r1, double r2, double *x, double *y, double *x1, double *y2)
    int intersect_line_circle(double x1, double y1, double x2, double y2, double cx, double cy, double r, double *x, double *y, double *x1, double *y2)
    double ortho(double x1, double y1, double x2, double y2, double px, double py, double *x, double *y)
    double project(double x1, double y1, double x2, double y2, double px, double py, double *x, double *y)

- Added:
    double between(double val1, double val2)

- Individual shader on process, scroll, mouse, text...

- Added:
    double max(double, double)
    double min(double, double)
    double sgn(double)
    int sgn(int)
    double round(double)
    double floor(double)
    double ceil(double)
    double trunc(double)
    double frac(double)
    double decimal(double)

- Renamed clampf to clamp

- Sorted cbox and used qsort/bsearch for cbox

- Custom Blend mode & other blend modes

- Max scrolls increased to 64

- screen.scale_resolution = 0 sets desktop size

- Control box functions

- Added:
    POINT_GET_TOTAL(file,graph)
- Added:
    GET_REAL_POINT(instance,cpoint,&x,&y)
- Added:
    COLLISION(instance, instance|type)

- Added center to the process

- Shaders

- Collision ignores farthest objects

- Added new collision system

- Refactored get_real_point


2019-07-23:

- modsound changes:
    rename:
        SOUND_INIT          -> SOUNDSYS_INIT
        SOUND_CLOSE         -> SOUNDSYS_QUIT
        SONG_LOAD           -> MUSIC_LOAD
        SONG_UNLOAD         -> MUSIC_UNLOAD
        SONG_PLAY           -> MUSIC_PLAY
        SONG_STOP           -> MUSIC_STOP
        SONG_PAUSE          -> MUSIC_PAUSE
        SONG_RESUME         -> MUSIC_RESUME
        SONG_FADE_IN        -> MUSIC_FADE_IN
        SONG_IS_PLAYING     -> MUSIC_IS_PLAYING
        SONG_SET_VOLUME     -> MUSIC_SET_VOLUME
        WAV_LOAD            -> SOUND_LOAD
        WAV_UNLOAD          -> SOUND_UNLOAD
        WAV_PLAY            -> SOUND_PLAY
        WAV_STOP            -> SOUND_STOP
        WAV_PAUSE           -> SOUND_PAUSE
        WAV_RESUME          -> SOUND_RESUME
        WAV_IS_PLAYING      -> SOUND_IS_PLAYING
        WAV_SET_VOLUME      -> SOUND_SET_VOLUME
    add:
        int MUSIC_FADE_IN(  int sound_id, int number_of_loops, int ms, double position )
            where:
                number_of_loops -1, mean infinite loops
                ms,  microsends of fading
                position, position in seconds
            return:
                0 is ok, -1 is any error

        int MUSIC_IS_PAUSED()
            return:
                0 or 1, -1 is any error

        int MUSIC_IS_FADING()
            return:
                MIX_NO_FADING
                MIX_FADING_OUT
                MIX_FADING_IN
                -1 is any error

        int MUSIC_REWIND()
            return:
                0

        int SOUND_PLAY( int sound_id, int number_of_loops, int channel, int ticks )
            where:
                number of loops (-1 infinite loops)
                channel (-1 any channel)
                ticks, timeout in milliseconds ( -1 no timeout )
            return:
                channel is ok
                -1 is error

        int SOUND_FADE_IN( int sound_id, int number_of_loops, int ms, int channel )
            where:
                number of loops (-1 infinite loops)
                ms, microsends of fading
                channel (-1 any channel)
            return:
                channel is ok
                -1 is error


        int SOUND_FADE_IN( int sound_id, int number_of_loops, int ms, int channel, int ticks )
            where:
                number of loops (-1 infinite loops)
                ms, microsends of fading
                channel (-1 any channel)
                ticks, timeout in milliseconds ( -1 no timeout )
            return:
                channel is ok
                -1 is error


        int SOUND_FADE_OFF( int channel, int ms )
            where:
                channel
                ms, microsends of fading
            return:
                channel

        int SOUND_IS_PAUSED( int channel )
            where:
                channel
            return:
                0 or 1, -1 is any error

        int SOUND_IS_FADING( int channel )
            where:
                channel
            return:
                MIX_NO_FADING
                MIX_FADING_OUT
                MIX_FADING_IN
                -1 is any error



2019-06-27:
- Add string escape caracters
    SECUENCE    HEX DESCRIPTION
    \a          07  Alert (Beep, Bell) (added in C89)[1]
    \b          08  Backspace
    \e          1B  escape character
    \f          0C  Formfeed Page Break
    \n          0A  Newline (Line Feed); see notes below
    \r          0D  Carriage Return
    \t          09  Horizontal Tab
    \v          0B  Vertical Tab
    \\          5C  Backslash
    \'          27  Apostrophe or single quotation mark
    \"          22  Double quotation mark
    \?          3F  Question mark (used to avoid trigraphs)
    \nnn            any The byte whose numerical value is given by nnn interpreted as an octal number
    \xhh…           any The byte whose numerical value is given by hh… interpreted as a hexadecimal number
- Add map characters to fonts from bitmap (optional)
- Fix region issues with negative height or width
- Add color ANSI/VT100 escape sequence for texts (only foreground colors supported)
    All ANSI escape sequence start with "\e[" or "\033[" or "\x1B[", then contine with:

        39                  Default foreground color

        30                  Black
        31                  Maroon
        32                  Green
        33                  Olive
        34                  Navy
        35                  Purple
        36                  Teal
        37                  Silver

        90                  Gray
        91                  Red
        92                  Lime
        93                  Yellow
        94                  Blue
        95                  Magenta
        96                  Aqua
        97                  White

        38;2;r;g;b          24 bits RGB mode, where r, g, b are numbers from 0 to 255
        38;5;c              8 bits index color mode, where c is a number from 0 to 255

        0                   Reset to default color
        m                   End sequence modification
        ;                   Sequence separator

2019-06-25:

- Fix bug if create more than 128 maps
- Remove change of x, y and size as double/float
- Change int fget_angle( double, double, double, double)
- Change double fget_dist( double, double, double, double)
- Change double fget_distx( int, double)
- Change double fget_disty( int, double)
- Add int get_angle(int, int)
- Add int get_dist(int, int)

2019-06-24:

- Remove math fixed point functions (internal)
- Support module operator for double/float (% and %=)
- Locals X and Y are double (mouse, process, scroll, and others)
- Increment regions to 256
- Add optional region to FADE, FADE_ON, FADE_OFF (last parameter)
- Change size, size_x and size_y to double
- Fix mouse.size_x and mouse.size_y
- Add UPTIME() as alias of GET_TIMER()
- Change parameters size_x and size_y in MAP_PUT to double
- Add global frame_info.frames_count
- Now COLLISION(...) is alias of COLLISION_BOX(...)

2019-06-23:

- Add PAUSE/RESUME

2019-06-20:

- Fix big textures issues
- Rename screen.full_screen to screen.fullscreen

2019-06-19:

- Add Pathfind
- Fix window issues in Windows
- Disable set_mode at startup
- For fullscreen mode don't use fake fullscreen that adjust to desktop resolution
- Fix screen_get() in scaled mode
- Add PNG_SAVE (ATENTION: USE IT ONLY FOR SCREEN_GET() OR MANUALLY MODIFIED/CREATED MAPS!!!)
- Add 32bits binaries version
- Add RGB, RGBA, RGB_GET and RGBA_GET for MAP
- rename VOLUME_SET to WAV_SET_VOLUME and VOLUME_SET_CHANNEL to CHANNEL_SET_VOLUME
- Fix transparence issues
- Add B_TRANSLUCENT and B_SBLEND
- Add Sustractive blend (but doesn't work as expected)
- Add G_DEPTH to MAP_INFO
- Fix blit when alpha is 0
- Add alpha opaque for returned bitmap from screen_get()
- Fix map_block_copy flags
- Fix screen_get()
- Fix cast and data type convertions
- Strings in SAVE are compatibles as BGD1
- Fix issue with variables already defined as "process" or "process type" identifier
- Change UNSIGNED INT return in some functions to INT
- Fix DBC windows/linux compatibility
- Fix transparence in 8bpp and 16bpp maps

2019-06-10:

- Add MAP_SET_PALETTE(fileid, graphid, first_color, ncolors, byte * RGBA_data )
      MAP_GET_PALETTE(fileid, graphid, first_color, ncolors, byte * RGBA_data )

    NOTE: Only works with 8 bits surfaces, when the texture is updated the changes made in texture are lost.
          The texture is updated with original surface, changes made with map_clear* or map_put_pixel are considered as original surface.
          Original palette is replaced.
          Support alpha by color index.

- Rework aspect ratio, remove old defines, new modes are:
    SRA_PRESERVE
    SRA_OVERSCAN
    SRA_FIT

    NOTE: SRA_FIT have issues, don't adjust aspect ratio when texture rotate, use only if use non-rotate textures


- Add CLAMP(value, min, max), CLAMPF(double value, double min, double max)

- Add TEXTURE_SET_QUALITY(quality)
    quality can be:
        Q_NEAREST   (default)
        Q_LINEAR
        Q_BEST

    NOTE: Only works with new or non drawed textures. If you want to apply on exist maps, you must unload them and load them again.

- Renamed MAP_XPUT to MAP_PUT

- Bugfix, missing drawing line on margin right and button of screen

- Fixed window_set_icon

- Fixed timer

- Fix fullscreen/window mode, grab and borderless.

- Fix WRITE_VALUE

- Rework FADE

    FADE( to_R, to_G, to_B, to_A, time_in_miliseconds )
    FADE_ON( time_in_miliseconds )          - Fade to normal
    FADE_OFF( time_in_miliseconds )         - Fade to black

- BugFix with FLOAT convertions from/to INTs types

- Remove some variables

- Group global variables

- Update texture if surface changed

- Fix SQRT name, error was named as SIRT

- Fix map_get_pixel return color as RGBA (32bits)

- Add vsync support and remove directdraw code

- Disable crypt support
